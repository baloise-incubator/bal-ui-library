import { Project } from 'ts-morph'
import { CreateStencilNextWrapperOptions } from './types'
import { dashToPascalCase } from './utils'

/**
 * Creates a Stencil Next.js wrapper component.
 *
 * @param {CreateStencilNextWrapperOptions} options - The options for creating the wrapper.
 * @param {Array} options.components - The list of Stencil components to be wrapped.
 * @returns {string} The generated TypeScript code for the wrapper component.
 *
 * @remarks
 * This function generates a TypeScript file that exports the specified Stencil components
 * for use in a Next.js application. The generated file includes a "use client" directive,
 * an ESLint disable comment, and an autogenerated comment indicating that the file was
 * generated by the Baloise Designs system.
 *
 * @example
 * ```typescript
 * const wrapperCode = createStencilNextWrapper({
 *   components: [{ tagName: 'my-component' }]
 * });
 * console.log(wrapperCode);
 * ```
 */
export const createStencilNextWrapper = ({ components }: CreateStencilNextWrapperOptions): string => {
  const project = new Project({ useInMemoryFileSystem: true })
  const useClientDirective = `'use client';\n\n`
  const disableEslint = `/* eslint-disable */\n`
  const autogeneratedComment = `
  /**
   * This file was automatically generated by the Baloise Designs system.
   * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
   */\n\n
  `

  const sourceFile = project.createSourceFile('component.ts', useClientDirective + autogeneratedComment + disableEslint)

  sourceFile.addExportDeclaration({
    moduleSpecifier: './components.server',
    namedExports: components.map(component => dashToPascalCase(component.tagName)),
  })

  sourceFile.organizeImports()
  sourceFile.formatText()

  return sourceFile.getFullText()
}
